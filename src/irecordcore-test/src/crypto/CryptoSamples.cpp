/*
 * Copyright (c) 2017-2018, Open Communications Security
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL OPEN COMMUNICATIONS SECURITY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include "CryptoSamples.h"

// Samples generated with:
//	printf "" | openssl sha1 -binary| xxd -g1 -c8
//	printf "Human sacrifice, dogs and cats living together, mass hysteria!" |
//			openssl sha1 -binary| xxd -g1 -c8

const std::uint8_t CRYPTOSAMPLES_SAMPLE[62] = {
		0x48, 0x75, 0x6d, 0x61, 0x6e, 0x20, 0x73, 0x61,
		0x63, 0x72, 0x69, 0x66, 0x69, 0x63, 0x65, 0x2c,
		0x20, 0x64, 0x6f, 0x67, 0x73, 0x20, 0x61, 0x6e,
		0x64, 0x20, 0x63, 0x61, 0x74, 0x73, 0x20, 0x6c,
		0x69, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f,
		0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20,
		0x6d, 0x61, 0x73, 0x73, 0x20, 0x68, 0x79, 0x73,
		0x74, 0x65, 0x72, 0x69, 0x61, 0x21};

const std::uint8_t CRYPTOSAMPLES_SHA1_EMPTY[20] = {
		0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55,
		0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09};

const std::uint8_t CRYPTOSAMPLES_SHA1_SAMPLE[20] = {
		0x30, 0xb7, 0xb3, 0x2d, 0x08, 0xf2, 0x70, 0xcf, 0xe3, 0x30,
		0x0e, 0xff, 0x12, 0x61, 0xdf, 0x53,	0x45, 0x72, 0x60, 0x34};

const std::uint8_t CRYPTOSAMPLES_SHA256_EMPTY[32] = {
		0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
		0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
		0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
		0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

const std::uint8_t CRYPTOSAMPLES_SHA256_SAMPLE[32] = {
		0x29, 0x62, 0xfe, 0x17, 0x08, 0xf1, 0xd9, 0x21,
		0xa7, 0x55, 0x95, 0xb2, 0xa5, 0x7b, 0x53, 0xb1,
		0x71, 0x30, 0x93, 0x84, 0x16, 0x28, 0xf9, 0xf4,
		0xc8, 0x8b, 0x45, 0x5a, 0xe2, 0x26, 0xe9, 0x8e};

const std::uint8_t CRYPTOSAMPLES_SHA512_EMPTY[64] = {
		0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd,
		0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
		0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc,
		0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
		0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0,
		0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
		0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81,
		0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e};

const std::uint8_t CRYPTOSAMPLES_SHA512_SAMPLE[64] = {
		0xfe, 0xff, 0x6f, 0xdb, 0x55, 0xed, 0xe1, 0x01,
		0xea, 0x39, 0xc9, 0xa9, 0x49, 0x11, 0xfe, 0x94,
		0xe0, 0xb7, 0x56, 0xa1, 0xf5, 0x58, 0x86, 0x2d,
		0x83, 0x5a, 0x7d, 0xe5, 0x8f, 0x01, 0x67, 0x81,
		0x15, 0xd7, 0x78, 0xb3, 0x1c, 0xaa, 0x1c, 0xd7,
		0xb6, 0x73, 0xba, 0xec, 0x95, 0x7b, 0xcd, 0x5a,
		0x14, 0x64, 0x83, 0xb5, 0xa4, 0x24, 0x66, 0x76,
		0xc8, 0xd8, 0x76, 0x06, 0x84, 0xfa, 0x54, 0xfc};
